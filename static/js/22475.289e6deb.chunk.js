"use strict";(self.webpackChunkn2_viaduct=self.webpackChunkn2_viaduct||[]).push([[22475],{2086:(e,t,n)=>{function r(e){const{options:t,value:n}=e;return"number"==typeof t[n]}function c(e){let t="";for(const n in e){const c=e[n];if("boolean"==typeof c)c&&(t+="#define ".concat(n,"\n"));else if("number"==typeof c)t+="#define ".concat(n," ").concat(c.toFixed(),"\n");else if("object"==typeof c)if(r(c)){const{value:e,options:r,namespace:o}=c,a=o?"".concat(o,"_"):"";for(const n in r)t+="#define ".concat(a).concat(n," ").concat(r[n].toFixed(),"\n");t+="#define ".concat(n," ").concat(a).concat(e,"\n")}else{const e=c.options;let r=0;for(const n in e)t+="#define ".concat(e[n]," ").concat((r++).toFixed(),"\n");t+="#define ".concat(n," ").concat(e[c.value],"\n")}}return t}n.d(t,{I:()=>c})},22475:(e,t,n)=>{n.r(t),n.d(t,{BufferObject:()=>r.g,FramebufferObject:()=>c.H,Program:()=>o.B,ProgramCache:()=>a.J,Renderbuffer:()=>s.l,ShaderCompiler:()=>i.Z,Texture:()=>l.g,VertexArrayObject:()=>f.Z,createProgram:()=>u.r,glslifyDefineMap:()=>d.I});var r=n(76718),c=n(12331),o=n(44488),a=n(46082),s=n(62881),i=n(78403),l=n(29492),f=n(36911),d=n(2086),u=n(26373)},26373:(e,t,n)=>{n.d(t,{r:()=>c});var r=n(44488);function c(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";return new r.B(e,n+t.shaders.vertexShader,n+t.shaders.fragmentShader,t.attributes)}},78403:(e,t,n)=>{n.d(t,{Z:()=>r});class r{constructor(e){this._readFile=e}resolveIncludes(e){return this._resolve(e)}_resolve(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new Map;if(t.has(e))return t.get(e);const n=this._read(e);if(!n)throw new Error("cannot find shader file ".concat(e));const r=/^[^\S\n]*#include\s+<(\S+)>[^\S\n]?/gm;let c=r.exec(n);const o=[];for(;null!=c;)o.push({path:c[1],start:c.index,length:c[0].length}),c=r.exec(n);let a=0,s="";return o.forEach(e=>{s+=n.slice(a,e.start),s+=t.has(e.path)?"":this._resolve(e.path,t),a=e.start+e.length}),s+=n.slice(a),t.set(e,s),s}_read(e){return this._readFile(e)}}}}]);
//# sourceMappingURL=22475.289e6deb.chunk.js.map